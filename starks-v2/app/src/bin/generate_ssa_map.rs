use std::path::{Path, PathBuf};

use app::llvm::air::codegen::AirCodegen;
use app::vm::GoldilocksField;

fn usage_and_exit() -> ! {
    eprintln!(
        "Usage: generate_ssa_map <LLVM_IR_PATH> [OUT_DIR]\n  \n  <LLVM_IR_PATH> – path to the .ll file generated by clang\n  [OUT_DIR]       – directory where ssa_map.json & range_proofs.json will be written (defaults to <workspace>/r2vm)"
    );
    std::process::exit(1);
}

fn main() {
    let mut args = std::env::args().skip(1);
    let ir_path: PathBuf = args
        .next()
        .map(PathBuf::from)
        .unwrap_or_else(|| usage_and_exit());

    let out_dir: PathBuf = args.next().map(PathBuf::from).unwrap_or_else(|| {
        Path::new(env!("CARGO_MANIFEST_DIR"))
            .parent()
            .unwrap()
            .join("r2vm")
    });

    let ir_str = std::fs::read_to_string(&ir_path)
        .unwrap_or_else(|e| panic!("Failed to read '{}': {}", ir_path.display(), e));

    let field = GoldilocksField;
    let air = AirCodegen::generate_air(&ir_str, &field).expect("AIR generation failed");

    std::fs::create_dir_all(&out_dir).expect("failed to create output directory");

    let ssa_out = out_dir.join("ssa_map.json");
    let range_out = out_dir.join("range_proofs.json");

    air.write_mapping_json(&ssa_out)
        .expect("failed to write ssa_map.json");
    air.write_range_proofs_json(&range_out)
        .expect("failed to write range_proofs.json");

    println!("SSA map written to {}", ssa_out.display());
    println!("Range proofs written to {}", range_out.display());
    println!("Range proof groups: {:?}", air.range_proof_groups);
}
